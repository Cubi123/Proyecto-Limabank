library(xts)
data <- zoo(x=rnorm(10))
coredata(data)
data <- rnorm(30)
plot(remp(30,data))
library(EnvStats)
install.packages("EnvStats")
library(EnvStats)
plot(remp(30,data))
hist(remp(30,data))
data <- rgamma(30)
hist(remp(30,data))
m1 <- matrix(c(2,2,1,1,2,2,6,4,3),3,3)
m1
m2 <- matrix(c(1.5,1,2,1.8,0.8,2),3,2)
m2
m1 %*% m2
qnorm(0.975)
qt(0.975,18)
pt(2.481415517)
pt(2.481415517,18)
pt(2.481415517,18)-1
pnorm(-20.91416518)
pnorm(7.783533261
)
pnorm(0.801809818
)
pnorm(-2.154443544
)
pnorm(0.801809818)-pnorm(-2.154443544)
library(parallel)
detectCores()
detectCores(logical = FALSE)
library("devtools")
install_github("agentlans/KneeArrower")
library(KneeArrower)
x <- seq(0, 5, 0.05)
y <- log(1+x)
findCutoff(x, y)
plot(x,y)
s<-findCutoff(x, y)
plot(x,y)
abline(s$x)
plot(x,y)
abline(s$x)
s$x
abline(s$x,col="red", lwd=3, lty=2)
plot(x,y)
abline(s$x,col="red", lwd=3, lty=2)
s<-findCutoff(x, y)
plot(x,y)
abline(v=s$x,col="red", lwd=3, lty=2)
abline(h=s$y,v=s$x,col="red", lwd=3, lty=2)
install.packages("spatstat")
library(spatstat)
library(tidyverse)
qnorm(0.5)
qnorm(0.975)
dt(11,9)
x <- c(10,
5,
5,
14,
8,
14,
14,
19,
8,
14,
)
x <- c(10,
5,
5,
14,
8,
14,
14,
19,
8,
14)
a <- mean(x)
s <- sd(x)
n <- length(x)
error <- qt(0.975,df=n-1)*s/sqrt(n)
left <- a-error
right <- a+error
left
right
?sd
qt(0.975,9)
error <- qt(0.95,df=n-1)*s/sqrt(n)
erro
error
a <- mean(x)
s <- sd(x)
n <- length(x)
error <- qt(0.95,df=n-1)*s/sqrt(n)
left <- a-error
right <- a+error
left
right
error
error <- qt(0.95,df=n-1)*s/sqrt(n)
error
qt(0.95,df=n-1)
a <- mean(x)
s <- sd(x)
n <- length(x)
error <- 1.83*s/sqrt(n)
left <- a-error
right <- a+error
left
right
error <- 1.83*s/sqrt(9)
left <- a-error
right <- a+error
left
right
a <- mean(x)
s <- sd(x)
n <- length(x)
error <- qt(0.95,df=n-1)*s/sqrt(n)
error
left <- a-error
right <- a+error
left
right
install.packages("rstan")
datos = read.csv(file.choose())
y             = datos$x[!is.na(datos$x)]
theta.hat     = mean(y)
round(100*theta.hat,2)
sd.theta.hat  = sqrt(theta.hat*(1-theta.hat)/length(y))
ic            = theta.hat + c(-1,1)*pnorm(0.975)*sd.theta.hat
round(100*ic,2)
alpha = 2
beta  = 10
x     = seq(0,1,0.01)
plot(x,dbeta(x,alpha,beta),type="l",
ylab ="Densidad",
xlab = expression(theta))
lines(x,dbeta(x,alpha + sum(y),beta + length(y) - sum(y)),lty=2)
legend(0.5,2,legend=c("Priori","Posteriori"),lty=1:2,
bty="n")
alpha.p = alpha + sum(y)
beta.p  = beta + length(y) - sum(y)
P.mean  = alpha.p/(alpha.p + beta.p)
P.mean
P.Var  =  alpha.p*beta.p/((alpha.p + beta.p + 1)*(alpha.p + beta.p)^2)
P.Var
sqrt(P.Var)
qbeta(c(0.025,0.975),alpha + sum(y),beta + length(y) - sum(y))
lik.miss <- function(x,y){
sens    = 0.88
spec    = 0.847
pi.hat  = 1 - spec + (spec + sens +1)*x
res     = -sum(y*log(pi.hat) + (1-y)*log(1-pi.hat))
res
}
res          = optimize(f=lik.miss,interval=c(0.01,0.08),y=y)
theta.hat    = res$minimum
theta.hat
sd.theta.hat = hessian(lik.miss,x=res$minimum,y=y)^(-1)
sd.theta.hat
theta.hat + qnorm(c(0.025,0.975))*sd.theta.hat
#
# Codigo de Stan
#
code.preva = "
data {
int<lower=1> n;                // number of observations
int<lower=0, upper = 1> y[n];  // Response variable
}
parameters {
real<lower=0,upper=1> pi;       // prevalence
real<lower=0,upper=1> Sn;       // sensitivity
real<lower=0,upper=1> Sp;       // especificity
}
transformed parameters {
real beta;
beta = logit(1 - Sp + (Sp + Sn - 1)*pi);
}
model {
//
y  ~ bernoulli_logit(beta);
Sn ~ beta(0.88*200,(1 - 0.88)*200);
Sp ~ beta(0.847*500,(1 - 0.847)*500);
pi ~ beta(1,10);
}
"
d.Peru = within(list(), {
y   = y
n   = length(y)
})
model1 = stan(model_code = code.preva, data = d.Peru,iter=4000)
print(model1,pars=c("p","Sn","Sp"))
rstan:::traceplot(model1,pars=c("p","Sn","Sp"))
stan_dens(model1,pars=c("p","Sn","Sp"))
code.preva = "
data {
int<lower=1> n;                // number of observations
int<lower=0, upper = 1> y[n];  // Response variable
}
parameters {
real<lower=0,upper=1> pi;       // prevalence
real<lower=0,upper=1> Sn;       // sensitivity
real<lower=0,upper=1> Sp;       // especificity
}
transformed parameters {
real beta;
beta = logit(1 - Sp + (Sp + Sn - 1)*pi);
}
model {
//
y  ~ bernoulli_logit(beta);
Sn ~ beta(0.88*200,(1 - 0.88)*200);
Sp ~ beta(0.847*500,(1 - 0.847)*500);
pi ~ beta(1,10);
}
"
d.Peru = within(list(), {
y   = y
n   = length(y)
})
model1 = stan(model_code = code.preva, data = d.Peru,iter=4000)
library(rstan)
code.preva = "
data {
int<lower=1> n;                // number of observations
int<lower=0, upper = 1> y[n];  // Response variable
}
parameters {
real<lower=0,upper=1> pi;       // prevalence
real<lower=0,upper=1> Sn;       // sensitivity
real<lower=0,upper=1> Sp;       // especificity
}
transformed parameters {
real beta;
beta = logit(1 - Sp + (Sp + Sn - 1)*pi);
}
model {
//
y  ~ bernoulli_logit(beta);
Sn ~ beta(0.88*200,(1 - 0.88)*200);
Sp ~ beta(0.847*500,(1 - 0.847)*500);
pi ~ beta(1,10);
}
"
d.Peru = within(list(), {
y   = y
n   = length(y)
})
model1 = stan(model_code = code.preva, data = d.Peru,iter=4000)
model1 = stan(model_code = code.preva, data = d.Peru,iter=4000)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
pkgbuild::has_build_tools(debug = TRUE)
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, ifelse(.Platform$OS.type == "windows", "Makevars.win", "Makevars"))
if (!file.exists(M)) file.create(M)
cat("\nCXX14FLAGS=-O3 -march=native -mtune=native",
if( grepl("^darwin", R.version$os)) "CXX14FLAGS += -arch x86_64 -ftemplate-depth-256" else
if (.Platform$OS.type == "windows") "CXX11FLAGS=-O3 -march=corei7 -mtune=corei7" else
"CXX14FLAGS += -fPIC",
file = M, sep = "\n", append = TRUE)
library(rstan)
options(mc.cores = parallel::detectCores())
datos = read.csv(file.choose())
y             = datos$x[!is.na(datos$x)]
datos = read.csv(file.choose())
y             = datos$x[!is.na(datos$x)]
theta.hat     = mean(y)
round(100*theta.hat,2)
sd.theta.hat  = sqrt(theta.hat*(1-theta.hat)/length(y))
ic            = theta.hat + c(-1,1)*pnorm(0.975)*sd.theta.hat
round(100*ic,2)
alpha = 2
beta  = 10
x     = seq(0,1,0.01)
plot(x,dbeta(x,alpha,beta),type="l",
ylab ="Densidad",
xlab = expression(theta))
lines(x,dbeta(x,alpha + sum(y),beta + length(y) - sum(y)),lty=2)
legend(0.5,2,legend=c("Priori","Posteriori"),lty=1:2,
bty="n")
alpha.p = alpha + sum(y)
beta.p  = beta + length(y) - sum(y)
P.mean  = alpha.p/(alpha.p + beta.p)
P.mean
P.Var  =  alpha.p*beta.p/((alpha.p + beta.p + 1)*(alpha.p + beta.p)^2)
P.Var
sqrt(P.Var)
qbeta(c(0.025,0.975),alpha + sum(y),beta + length(y) - sum(y))
lik.miss <- function(x,y){
sens    = 0.88
spec    = 0.847
pi.hat  = 1 - spec + (spec + sens +1)*x
res     = -sum(y*log(pi.hat) + (1-y)*log(1-pi.hat))
res
}
res          = optimize(f=lik.miss,interval=c(0.01,0.08),y=y)
theta.hat    = res$minimum
theta.hat
sd.theta.hat = hessian(lik.miss,x=res$minimum,y=y)^(-1)
sd.theta.hat
theta.hat + qnorm(c(0.025,0.975))*sd.theta.hat
code.preva = "
data {
int<lower=1> n;                // number of observations
int<lower=0, upper = 1> y[n];  // Response variable
}
parameters {
real<lower=0,upper=1> pi;       // prevalence
real<lower=0,upper=1> Sn;       // sensitivity
real<lower=0,upper=1> Sp;       // especificity
}
transformed parameters {
real beta;
beta = logit(1 - Sp + (Sp + Sn - 1)*pi);
}
model {
//
y  ~ bernoulli_logit(beta);
Sn ~ beta(0.88*200,(1 - 0.88)*200);
Sp ~ beta(0.847*500,(1 - 0.847)*500);
pi ~ beta(1,10);
}
"
d.Peru = within(list(), {
y   = y
n   = length(y)
})
model1 = stan(model_code = code.preva, data = d.Peru,iter=4000)
library(rstan)
parallel::detectCores()
pkgbuild::has_build_tools(debug = TRUE)
library(rstan)
install.packages("clustMD")
library(clustMD)
data("Byar")
data("Byar")
attach(bayar)
attach(Byar)
View(Byar)
View(Byar)
?byar
?Byar
install.packages("shinystan")
devtools::install_github("stan-dev/shinystan", build_vignettes = TRUE)
install.packages("shinystan")
library("shinystan")
launch_shinystan_demo()
launch_shinystan_demo()
install.packages("projmanr")
library(projmanr)
install.packages("ProjectManagement")
?ProjectManagement
library(ProjectManagement)
help(ProjectManagement)
prec1and2<-matrix(c(0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0),nrow=5,ncol=5,byrow=TRUE)
organize(prec1and2)
prec1and2
duration<-c(5,4,5,2,2)
minimum.durations<-c(3,2,3,1,1)
activities.costs<-c(1,1,1,1,1)
prec1and2<-matrix(c(0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0),nrow=5,ncol=5,byrow=TRUE)
duration.project<-6
mce(duration,minimum.durations,prec1and2,prec3and4=matrix(0),activities.costs,duration.project)
prec1and2<-matrix(c(0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0),nrow=5,ncol=5,byrow=TRUE)
duration<-c(3,2,1,1.5,4.2)
early.times<-c(0,0,3.5,2,0)
last.time(prec1and2,duration=duration,early.times=early.times)
library(tidyverse)
carnes <- write_csv("https://raw.githubusercontent.com/dparedesi/DS-con-R/master/Carnes-Universitarios-2018.csv")
carnes <- write_csv("https://raw.githubusercontent.com/dparedesi/DS-con-R/master/Carnes-Universitarios-2018.csv",quote_escape = "|")
carnes <- read.delim("https://raw.githubusercontent.com/dparedesi/DS-con-R/master/Carnes-Universitarios-2018.csv",sep='|')
head(carnes)
hist(carnes$Cant_Carnes)
set.seed(111)
setwd("C:/Users/Christian/Desktop/Ciclo Cubi/Temas IOP/Proyecto-Limabank")
set.seed(111)
clientes_limabank <- read.csv("Clientes_Limabank.csv")
datos_agencia <-read.csv("Datos_Agencia.csv")
install.packages("rticles")
install.packages('rmarkdown')
install.packages("rmarkdown")
install.packages("pdflatex")
